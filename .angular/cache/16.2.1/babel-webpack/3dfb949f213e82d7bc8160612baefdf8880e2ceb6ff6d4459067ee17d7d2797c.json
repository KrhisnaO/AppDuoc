{"ast":null,"code":"import _asyncToGenerator from \"/Users/krhisnaoyanedelyanez/Desktop/ProyectosIonic/AppDuoc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, ElementRef, ViewChild } from '@angular/core';\nimport { Usuario } from 'src/app/model/Usuario';\nlet PreguntaPage = class PreguntaPage {\n  constructor(activeroute // Permite obtener los parámetros de la página login\n  , router // Permite navegar entre páginas\n  , alertController // Permite mostrar mensajes emergentes más complejos que Toast\n  , animationController, toastController) {\n    this.activeroute = activeroute;\n    this.router = router;\n    this.alertController = alertController;\n    this.animationController = animationController;\n    this.toastController = toastController;\n    this.usuario = new Usuario('', '', '', '', '', '');\n    // Se llama a la ruta activa y se obtienen sus parámetros mediante una subscripcion\n    this.activeroute.queryParams.subscribe(params => {\n      const nav = this.router.getCurrentNavigation();\n      if (nav) {\n        // Si tiene datos extra, se rescatan y se asignan a una propiedad\n        if (nav.extras.state) {\n          this.usuario = nav.extras.state['usuario'];\n        }\n        return;\n      }\n      // Si no vienen datos extra desde la página anterior, quiere decir que el usuario\n      // intentó entrar directamente a la página home sin pasar por el login,\n      // de modo que el sistema debe enviarlo al login para que inicie sesión.\n      this.router.navigate(['/login']);\n    });\n  }\n  ngOnInit() {}\n  ngAfterViewInit() {\n    if (this.itemTitulo) {\n      const animation = this.animationController.create().addElement(this.itemTitulo.nativeElement).iterations(1).duration(3000).fromTo('transform', 'translate(0%)', 'translate(45%)').fromTo('opacity', 0.2, 1);\n      animation.play();\n    }\n  }\n  animateItem(elementRef) {\n    this.animationController.create().addElement(elementRef).iterations(1).duration(600).fromTo('transform', 'translate(100%)', 'translate(0%)').play();\n  }\n  // Este método sirve para mostrar un mensaje emergente\n  presentAlert(titulo, mensaje) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const alert = yield _this.alertController.create({\n        header: titulo,\n        message: mensaje,\n        buttons: ['OK']\n      });\n      yield alert.present();\n    })();\n  }\n  ingresar() {\n    if (!this.validarUsuario(this.usuario)) {\n      return;\n    }\n    /*\n      Se declara e instancia un objeto de la clase NavigationExtras, para poder pasarle parámetros a la página home.\n      Al objeto json \"state\" se le asigna un objeto con nombre de clave \"login\" y el valor \"this.login\", de modo que\n      le pase la cuenta de usuario y su password a la página home.\n           Nótese que al enviar this.login, realmente se está enviando los valores que el usuario digitó en las cajas de input,\n      pues gracias a la directiva [(ngModel)]=\"login.usuario\", el programa sabe que hay una relación directa de unión entre\n      el valor de la propiedad login.usuario y el valor del control gráfico que lleva este mismo nombre.\n    */\n    const navigationExtras = {\n      state: {\n        usuario: this.usuario\n      }\n    };\n    this.router.navigate(['/correcta'], navigationExtras); // Navegamos hacia el Home y enviamos la información extra\n  }\n  /*\n    Usaremos validateModel para verificar que se cumplan las validaciones de los campos del formulario\n  */\n  validarUsuario(usuario) {\n    const usu = this.usuario.MostrarContraseña(this.usuario.correo, this.usuario.respuesta);\n    if (usu) {\n      return true;\n    } else {\n      this.router.navigate(['/incorrecta']);\n      return false;\n    }\n  }\n  mostrarMensaje(mensaje, duracion) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Permite mostrar un mensaje emergente que dura unos pocos segundos y desaparece. El mensaje es asincrónico, \n      // los que permite que el mensaje se pueda ver incluso cuando ya ha cambiado a la siguiente página.\n      const toast = yield _this2.toastController.create({\n        message: mensaje,\n        duration: duracion ? duracion : 2000\n      });\n      toast.present();\n    })();\n  }\n  login() {\n    this.router.navigate(['/login']);\n  }\n};\n__decorate([ViewChild('titulo', {\n  read: ElementRef\n})], PreguntaPage.prototype, \"itemTitulo\", void 0);\nPreguntaPage = __decorate([Component({\n  selector: 'app-pregunta',\n  templateUrl: 'pregunta.page.html',\n  styleUrls: ['pregunta.page.scss']\n})], PreguntaPage);\nexport { PreguntaPage };","map":{"version":3,"names":["Component","ElementRef","ViewChild","Usuario","PreguntaPage","constructor","activeroute","router","alertController","animationController","toastController","usuario","queryParams","subscribe","params","nav","getCurrentNavigation","extras","state","navigate","ngOnInit","ngAfterViewInit","itemTitulo","animation","create","addElement","nativeElement","iterations","duration","fromTo","play","animateItem","elementRef","presentAlert","titulo","mensaje","_this","_asyncToGenerator","alert","header","message","buttons","present","ingresar","validarUsuario","navigationExtras","usu","MostrarContraseña","correo","respuesta","mostrarMensaje","duracion","_this2","toast","login","__decorate","read","selector","templateUrl","styleUrls"],"sources":["/Users/krhisnaoyanedelyanez/Desktop/ProyectosIonic/AppDuoc/src/app/pages/pregunta/pregunta.page.ts"],"sourcesContent":["import { AfterViewInit, Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router,NavigationExtras } from '@angular/router';\nimport { AlertController } from '@ionic/angular';\nimport { AnimationController} from '@ionic/angular';\nimport { Usuario } from 'src/app/model/Usuario';\nimport { ToastController } from '@ionic/angular'; // Permite mostrar mensajes emergente\n\n@Component({\n  selector: 'app-pregunta',\n  templateUrl: 'pregunta.page.html',\n  styleUrls: ['pregunta.page.scss'],\n})\n\nexport class PreguntaPage implements OnInit, AfterViewInit {\n\n  @ViewChild('titulo', { read: ElementRef }) itemTitulo!: ElementRef;\n\n  public usuario: Usuario;\n\n   constructor(\n        private activeroute: ActivatedRoute // Permite obtener los parámetros de la página login\n      , private router: Router // Permite navegar entre páginas\n      , private alertController: AlertController // Permite mostrar mensajes emergentes más complejos que Toast\n      , private animationController: AnimationController\n      , private toastController: ToastController) { // Permite crear animaciones con  \n        \n\n    this.usuario = new Usuario('', '', '', '', '', '');\n\n    // Se llama a la ruta activa y se obtienen sus parámetros mediante una subscripcion\n    this.activeroute.queryParams.subscribe(params => { \n\n      const nav = this.router.getCurrentNavigation();\n      if (nav) {\n        // Si tiene datos extra, se rescatan y se asignan a una propiedad\n        if (nav.extras.state) {\n          this.usuario = nav.extras.state['usuario'];\n          }\n          return;\n        }\n    \n      // Si no vienen datos extra desde la página anterior, quiere decir que el usuario\n      // intentó entrar directamente a la página home sin pasar por el login,\n      // de modo que el sistema debe enviarlo al login para que inicie sesión.\n      this.router.navigate(['/login']);\n\n    });\n  }\n\n  public ngOnInit(): void {\n\n  }\n\n\n  public ngAfterViewInit(): void {\n    if (this.itemTitulo) {\n      const animation = this.animationController\n        .create()\n        .addElement(this.itemTitulo.nativeElement)\n        .iterations(1)\n        .duration(3000)\n        .fromTo('transform', 'translate(0%)', 'translate(45%)')\n        .fromTo('opacity', 0.2, 1);\n\n      animation.play();\n    }\n  }\n\n  public animateItem(elementRef: any) {\n    this.animationController\n      .create()\n      .addElement(elementRef)\n      .iterations(1)\n      .duration(600)\n      .fromTo('transform', 'translate(100%)', 'translate(0%)')\n      .play();\n  }\n\n\n  // Este método sirve para mostrar un mensaje emergente\n  public async presentAlert(titulo: string, mensaje: string) {\n    const alert = await this.alertController.create({\n      header: titulo,\n      message: mensaje,\n      buttons: ['OK']\n    });\n\n    await alert.present();\n  }\n  public ingresar(): void {\n\n    if(!this.validarUsuario(this.usuario)) {\n      return;\n    }\n\n\n\n    /*\n      Se declara e instancia un objeto de la clase NavigationExtras, para poder pasarle parámetros a la página home.\n      Al objeto json \"state\" se le asigna un objeto con nombre de clave \"login\" y el valor \"this.login\", de modo que\n      le pase la cuenta de usuario y su password a la página home.\n\n      Nótese que al enviar this.login, realmente se está enviando los valores que el usuario digitó en las cajas de input,\n      pues gracias a la directiva [(ngModel)]=\"login.usuario\", el programa sabe que hay una relación directa de unión entre\n      el valor de la propiedad login.usuario y el valor del control gráfico que lleva este mismo nombre.\n    */\n   \n    const navigationExtras: NavigationExtras = {\n      state: {\n        usuario: this.usuario\n      }\n    };\n    this.router.navigate(['/correcta'], navigationExtras); // Navegamos hacia el Home y enviamos la información extra\n  }\n  /*\n    Usaremos validateModel para verificar que se cumplan las validaciones de los campos del formulario\n  */\n  public validarUsuario(usuario: Usuario) {\n\n    const usu = this.usuario.MostrarContraseña(this.usuario.correo,this.usuario.respuesta);\n\n    if (usu) {\n      return true;\n    }\n    else{\n      this.router.navigate(['/incorrecta']);\n      return false;\n      }\n  }\n  async mostrarMensaje(mensaje: string, duracion?: number) {\n    // Permite mostrar un mensaje emergente que dura unos pocos segundos y desaparece. El mensaje es asincrónico, \n    // los que permite que el mensaje se pueda ver incluso cuando ya ha cambiado a la siguiente página.\n    const toast = await this.toastController.create({\n        message: mensaje,\n        duration: duracion? duracion: 2000\n      });\n    toast.present();\n  }\n  public login() : void{\n    this.router.navigate(['/login'])\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}